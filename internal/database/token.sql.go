// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: token.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (id, user_id, expires_at, user_agent, ip_address)
    VALUES ($1, $2, $3, $4, $5)
    RETURNING id, user_id, expires_at, user_agent, ip_address
`

type CreateTokenParams struct {
	ID        string
	UserID    uuid.UUID
	ExpiresAt time.Time
	UserAgent sql.NullString
	IpAddress sql.NullString
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken,
		arg.ID,
		arg.UserID,
		arg.ExpiresAt,
		arg.UserAgent,
		arg.IpAddress,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.UserAgent,
		&i.IpAddress,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens WHERE id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteToken, id)
	return err
}

const findTokenByID = `-- name: FindTokenByID :one
SELECT id, user_id, expires_at, user_agent, ip_address FROM tokens WHERE id = $1
`

func (q *Queries) FindTokenByID(ctx context.Context, id string) (Token, error) {
	row := q.db.QueryRowContext(ctx, findTokenByID, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.UserAgent,
		&i.IpAddress,
	)
	return i, err
}

const updateToken = `-- name: UpdateToken :exec
UPDATE tokens SET expires_at = $1 WHERE id = $2
`

type UpdateTokenParams struct {
	ExpiresAt time.Time
	ID        string
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken, arg.ExpiresAt, arg.ID)
	return err
}
